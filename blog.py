import cPickle, subprocess, tempfile, markdown2, config, time, argparse, tempfile, os;
# Load the blog posts
try:
	blog_posts = cPickle.load(open("posts.pickled","rb"))
except:
	blog_posts = []

# command line args
parser = argparse.ArgumentParser(description="A blog generator.")
parser.add_argument("--workflow",help="Run the basic workflow (write a new post, generate the page, and quit)",action="store_true")
parser.add_argument("--generate",help="Generate the page and quit",action="store_true")
args = parser.parse_args()

# Display header if not automated.
if not args.workflow and not args.generate:
	print("MineRobber's blog generator")
	print("------------------------")
	print("'n' for new post, 'g' to generate, 'q' to quit.")
	running = True;

# tweet link ("tweet this")
def tweetlink():
	return config.tweetlink_do and config.tweetlink_location and config.tweetlink_url

# OGP data
def ogp():
	return config.ogp_do and config.ogp_desc and config.ogp_image

# main loop
def loop(choice):
	if choice.lower() == "n":
		title = raw_input("Title: ")
		# use editor
		bodyf = tempfile.NamedTemporaryFile()
		os.system("nano {}".format(bodyf.name))
		body = markdown2.markdown(bodyf.read().rstrip())
		bodyf.close()
		# add post to post list
		blog_posts.append([title, body])
	elif choice.lower() == "g":
		rss = "<?xml version='1.0' encoding='UTF-8'?><rss version='2.0'><channel><title>"+config.title+"</title><link>"+config.url+"</link><description>"+config.desc+"</description>"
		contents = "<html>\n<head>\n<title>{0}</title>\n<link rel='stylesheet' href='{1}'>\n".format(config.title,config.css_location)
		if ogp():
			contents+="<meta property='og:title' value='{}'>\n<meta property='og:type' value='website'>\n<meta property='og:image' value='{}'>\n<meta property='og:description' value='{}'>\n".format(config.title,config.ogp_image,config.ogp_desc)
		contents+="</head>\n<body>\n<h1>{}</h1>\n".format(config.title)
		# some tricky shit to make posts be in chronological order
		blog_posts.reverse()
		i = len(blog_posts)
		for post in blog_posts:
			contents += "<h2 id='post"+str(i)+"'>"+post[0]+"</h2>\n<p>"+post[1]
			if tweetlink(): # add tweetlink if able
				contents += "<a href='{}'>Tweet this</a></p>".format(config.tweetlink_url+"#post"+str(i))
			else:
				contents += "</p>\n"
			rss += "<item><title>{0}</title><link>{3}#post{1!s}</link><description>{2}</description></item>".format(post[0],i,post[1][3:-5].replace("<","&lt;").replace(">","&gt;"),config.url)
			i -= 1
		blog_posts.reverse()
		# footer
		contents += "<hr>\n<p>Generated by <a href='https://github.com/MineRobber9000/blog-gen'>MineRobber's Python blog generator.</a><br><a href='{}'>RSS Feed</a></p>\n</body>\n</html>".format(config.rss_url)
		# close RSS
		rss += "</channel></rss>"
		with open(config.location,"wb") as f:
			f.write(contents);
		with open(config.rss_location,"wb") as f2:
			f2.write(rss)
		if tweetlink():
			with open(config.tweetlink_location,"wb") as f3:
				f3.write("<script>document.location='https://twitter.com/home?status={}'+document.location.hash.split('').slice(1).join('')</script>".format(config.tweetlink_format).format(config.title,config.url))
	elif choice.lower() == "q":
		return False
	else:
		print("Unknown option: "+choice)
	cPickle.dump(blog_posts,open("posts.pickled","wb"))
	return True
# loop on input
if not args.workflow and not args.generate:
	while running:
		running = loop(raw_input("> "))
	print("bye")
elif not args.workflow and args.generate: # generate the page
	loop("g")
	loop("q")
else: # same thing but also add new post
	loop("n")
	loop("g")
	loop("q")
